extends ../layout
block content
      section#post
        article
          header.wrpl.w-3-4
            h1
              //-TODO: if more than one endpoint then display how many and their names 
              if ep.datasets.length>1
                a(href="/endpoint?uri=#{ep.uri}") #{ep.uri} Endpoint
              else
                a(href="/endpoint?uri=#{ep.uri}") #{ep.datasets[0].label} Endpoint
            time Last update: #{lastUpdate}
            details
              summary Description:
              p Public SPARQL endpoints list is fetch dynamically using CKAN SPARQL Endpoint.
              p
                | Your endpoint is not in this list? Please consider adding it to the relevant package in CKAN.
              p You can query all data generated by this tool via our SPARQL endpoint.
              p Official Stats are avaialable and will be regularly published.
      .line
      section#posts.default-area
          article.wrpl(style='min-width: 400px; width:100%;')
            div(style="height:400px;")(class=(ep.availability.upNow==true) ? ((ep.availability.uptimeLast24h <1) ?'wrplInnerBoxOrange':'wrplInnerBoxGreen'):((ep.availability.uptimeLast7d >0) ?'wrplInnerBoxRed':'wrplInnerBox'))
              a(title='', href='./availability')
                h2(style="float:left;") Availability
                span(style="float:right;") Last day (
                  b #{parseFloat((ep.availability.uptimeLast24h*100).toFixed(2))+ '%'}
                  ); last 30 days (
                  b #{parseFloat((ep.availability.uptimeLast31d*100).toFixed(2))+ '%'}
                  ); overall (
                  b #{parseFloat((ep.availability.uptimeOverall*100).toFixed(2))+ '%'}
                  )
              svg#chartAvail(style='height: 370px; padding-right:10px;')
          article.wrpl(style='min-width: 400px; width:100%;')
            - function numberWithCommas(x) {if (x) return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");}
            div(style="height:400px;")(class="wrplInnerBox")
              a(title='', href='./performance')
                h2(style="float:left;") Performance
                span(style="float:right;") Suspected Result size threshold: 
                  //- TODO handle case where no value
                  b #{numberWithCommas(ep.performance.threshold)}
              table(style='width:100%')
                tr
                  td
                    svg#chartPerformanceAsk(style='float:left; height: 370px;')
                  td
                    svg#chartPerformanceJoin(style='float:left; height: 370px;')
          article.wrpl(style='min-width: 400px; width:100%;')
            div(class="wrplInnerBoxNoHeight")
              a(title='', href='./interoperability')
                h2(style="float:left;") Interoperability
              table#table_current.psp-table(cellspacing='0', cellpadding='0', border='0', width='100%')
                tr
                  td(valign='top')(style='width:50%; padding: 0em 2em;')
                    table#table_current(cellspacing='0', cellpadding='0', border='0', width='100%')
                      thead
                        tr
                          th.tablehead(colspan=2) SPARQL 1.0 features
                      tbody
                        - each feature, i in ep.interoperability.SPARQL1Features
                          tr(class=(i % 2 == 0) ? 'odd' : 'even')
                            td
                              span(onmouseover='tooltip.show(\'#{configInterop[feature.label]}\')')(onmouseout='tooltip.hide();') #{feature.label}
                            td.tdcenter
                              if feature.value
                                img(src='./images/green.png')
                              else
                                img(src='./images/red.png')
                  td(valign='top')(style='width:50%; padding: 0em 2em')
                    table#table_current.psp-table(cellspacing='0', cellpadding='0', border='0', width='100%')
                      thead
                        tr
                          th.tablehead(colspan=2) SPARQL 1.1 features
                      tbody
                        - each feature, i in ep.interoperability.SPARQL11Features
                          tr(class=(i % 2 == 0) ? 'odd' : 'even')
                            td
                              span(onmouseover='tooltip.show(\'#{configInterop[feature.label]}\')')(onmouseout='tooltip.hide();') #{feature.label}
                            td.tdcenter
                              if feature.value
                                img(src='./images/green.png')
                              else
                                img(src='./images/red.png')
          article.wrpl(style='min-width: 400px; width:100%;')
            div.wrplInnerBoxNoHeight
              a(title='', href='./discoverability')
                h2 Discoverability
              div 
               table#table_current.psp-table(cellspacing='0', cellpadding='0', border='0', width='100%')
                tr
                  td(valign='top')(style='width:33%;; padding: 0em 2em;')
                    table#table_current(cellspacing='0', cellpadding='0', border='0')(style='margin-left:1em;')
                      thead
                        tr
                          th.tablehead Server Name
                      tbody
                        tr
                          td
                            span "
                              b #{ep.discoverability.serverName}
                              " server name has been detected in the HTTP GET response
                  td(valign='top')(style='width:33%;; padding: 0em 2em;')
                    table#table_current(cellspacing='0', cellpadding='0', border='0')(style='margin-left:1em;')
                      thead
                        tr
                          th.tablehead VoID Description
                          th.tablehead 
                      tbody
                        - each feature, i in ep.discoverability.VoIDDescription
                          tr(class=(i % 2 == 0) ? 'odd' : 'even')
                            td #{feature.label}
                            td.tdcenter
                              if feature.value
                                img(src='./images/green.png')
                              else
                                img(src='./images/red.png')
                  td(valign='top')(style='width:33%; padding: 0em 2em;')
                    table#table_current(cellspacing='0', cellpadding='0', border='0')(style='margin-left:1em;')
                      thead
                        tr
                          th.tablehead SD Description
                          th.tablehead 
                      tbody
                        - each feature, i in ep.discoverability.SDDescription
                          tr(class=(i % 2 == 0) ? 'odd' : 'even')
                            td #{feature.label}
                            td.tdcenter
                              if feature.value
                                img(src='./images/green.png')
                              else
                                img(src='./images/red.png')
      script.
        var colors = d3.scale.category20();
        keyColor = function(d, i) {return colors(d.key)};
        nv.addGraph(function() {
          var chart = nv.models.stackedAreaChart()
            .x(function(d) { return d.x })
            .y(function(d) { return d.y })
            .color(keyColor)
            .showControls(false)
            .showLegend(false)
            .yDomain([0,1]);
          chart.xAxis.tickFormat(function(d) { return d3.time.format('%Y-%m-%d')(new Date(d)) });
          chart.yAxis.tickFormat(d3.format('.2%'));
          d3.select('#chartAvail')
            .datum(!{JSON.stringify(ep.availability.data)})
            .call(chart);
          nv.utils.windowResize(chart.update);
          chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });
          return chart;
        });
        nv.addGraph(function() {
          var chart = nv.models.multiBarHorizontalChart()
              .x(function(d) { return d.label })
              .y(function(d) { return d.value })
              .margin({top: 30, right: 20, bottom: 50, left: 30})
              .showValues(true)
              .showControls(false)
              .barColor(d3.scale.category20().range());
          chart.yAxis
              .tickFormat(d3.format(',.2f'));
          d3.select('#chartPerformanceAsk')
              .datum(!{JSON.stringify(ep.performance.ask)})
              .transition().duration(500)
              .call(chart);
          nv.utils.windowResize(chart.update);
          chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });
          return chart;
        });
        nv.addGraph(function() {
          var chart = nv.models.multiBarHorizontalChart()
              .x(function(d) { return d.label })
              .y(function(d) { return d.value })
              .margin({top: 30, right: 20, bottom: 50, left: 30})
              .showValues(true)
              .barColor(d3.scale.category20().range())
              .showControls(false);
          chart.xAxis.axisLabel('s');
          chart.yAxis
              .tickFormat(d3.format(',.2f'));
          d3.select('#chartPerformanceJoin')
              .datum(!{JSON.stringify(ep.performance.join)})
              .transition().duration(500)
              .call(chart);
          nv.utils.windowResize(chart.update);
          chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });
          return chart;
        });