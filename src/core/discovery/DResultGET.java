/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package core.discovery;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DResultGET extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DResultGET\",\"namespace\":\"core.discovery\",\"fields\":[{\"name\":\"endpointResult\",\"type\":{\"type\":\"record\",\"name\":\"EndpointResult\",\"namespace\":\"core\",\"fields\":[{\"name\":\"endpoint\",\"type\":{\"type\":\"record\",\"name\":\"Endpoint\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\"}]}},{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"start\",\"type\":\"long\"},{\"name\":\"end\",\"type\":\"long\"}],\"imports\":[\"Endpoint.avsc\"]}},{\"name\":\"SPARQLDESCterms\",\"type\":\"int\"},{\"name\":\"VOIDterms\",\"type\":\"int\"},{\"name\":\"SPARQLDESCpreds\",\"type\":{\"type\":\"map\",\"values\":[\"string\",\"long\"]}},{\"name\":\"voiDpreds\",\"type\":{\"type\":\"map\",\"values\":[\"string\",\"long\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public core.EndpointResult endpointResult;
  @Deprecated public int SPARQLDESCterms;
  @Deprecated public int VOIDterms;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Object> SPARQLDESCpreds;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Object> voiDpreds;

  /**
   * Default constructor.
   */
  public DResultGET() {}

  /**
   * All-args constructor.
   */
  public DResultGET(core.EndpointResult endpointResult, java.lang.Integer SPARQLDESCterms, java.lang.Integer VOIDterms, java.util.Map<java.lang.CharSequence,java.lang.Object> SPARQLDESCpreds, java.util.Map<java.lang.CharSequence,java.lang.Object> voiDpreds) {
    this.endpointResult = endpointResult;
    this.SPARQLDESCterms = SPARQLDESCterms;
    this.VOIDterms = VOIDterms;
    this.SPARQLDESCpreds = SPARQLDESCpreds;
    this.voiDpreds = voiDpreds;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return endpointResult;
    case 1: return SPARQLDESCterms;
    case 2: return VOIDterms;
    case 3: return SPARQLDESCpreds;
    case 4: return voiDpreds;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: endpointResult = (core.EndpointResult)value$; break;
    case 1: SPARQLDESCterms = (java.lang.Integer)value$; break;
    case 2: VOIDterms = (java.lang.Integer)value$; break;
    case 3: SPARQLDESCpreds = (java.util.Map<java.lang.CharSequence,java.lang.Object>)value$; break;
    case 4: voiDpreds = (java.util.Map<java.lang.CharSequence,java.lang.Object>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'endpointResult' field.
   */
  public core.EndpointResult getEndpointResult() {
    return endpointResult;
  }

  /**
   * Sets the value of the 'endpointResult' field.
   * @param value the value to set.
   */
  public void setEndpointResult(core.EndpointResult value) {
    this.endpointResult = value;
  }

  /**
   * Gets the value of the 'SPARQLDESCterms' field.
   */
  public java.lang.Integer getSPARQLDESCterms() {
    return SPARQLDESCterms;
  }

  /**
   * Sets the value of the 'SPARQLDESCterms' field.
   * @param value the value to set.
   */
  public void setSPARQLDESCterms(java.lang.Integer value) {
    this.SPARQLDESCterms = value;
  }

  /**
   * Gets the value of the 'VOIDterms' field.
   */
  public java.lang.Integer getVOIDterms() {
    return VOIDterms;
  }

  /**
   * Sets the value of the 'VOIDterms' field.
   * @param value the value to set.
   */
  public void setVOIDterms(java.lang.Integer value) {
    this.VOIDterms = value;
  }

  /**
   * Gets the value of the 'SPARQLDESCpreds' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Object> getSPARQLDESCpreds() {
    return SPARQLDESCpreds;
  }

  /**
   * Sets the value of the 'SPARQLDESCpreds' field.
   * @param value the value to set.
   */
  public void setSPARQLDESCpreds(java.util.Map<java.lang.CharSequence,java.lang.Object> value) {
    this.SPARQLDESCpreds = value;
  }

  /**
   * Gets the value of the 'voiDpreds' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Object> getVoiDpreds() {
    return voiDpreds;
  }

  /**
   * Sets the value of the 'voiDpreds' field.
   * @param value the value to set.
   */
  public void setVoiDpreds(java.util.Map<java.lang.CharSequence,java.lang.Object> value) {
    this.voiDpreds = value;
  }

  /** Creates a new DResultGET RecordBuilder */
  public static core.discovery.DResultGET.Builder newBuilder() {
    return new core.discovery.DResultGET.Builder();
  }
  
  /** Creates a new DResultGET RecordBuilder by copying an existing Builder */
  public static core.discovery.DResultGET.Builder newBuilder(core.discovery.DResultGET.Builder other) {
    return new core.discovery.DResultGET.Builder(other);
  }
  
  /** Creates a new DResultGET RecordBuilder by copying an existing DResultGET instance */
  public static core.discovery.DResultGET.Builder newBuilder(core.discovery.DResultGET other) {
    return new core.discovery.DResultGET.Builder(other);
  }
  
  /**
   * RecordBuilder for DResultGET instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DResultGET>
    implements org.apache.avro.data.RecordBuilder<DResultGET> {

    private core.EndpointResult endpointResult;
    private int SPARQLDESCterms;
    private int VOIDterms;
    private java.util.Map<java.lang.CharSequence,java.lang.Object> SPARQLDESCpreds;
    private java.util.Map<java.lang.CharSequence,java.lang.Object> voiDpreds;

    /** Creates a new Builder */
    private Builder() {
      super(core.discovery.DResultGET.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(core.discovery.DResultGET.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing DResultGET instance */
    private Builder(core.discovery.DResultGET other) {
            super(core.discovery.DResultGET.SCHEMA$);
      if (isValidValue(fields()[0], other.endpointResult)) {
        this.endpointResult = data().deepCopy(fields()[0].schema(), other.endpointResult);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.SPARQLDESCterms)) {
        this.SPARQLDESCterms = data().deepCopy(fields()[1].schema(), other.SPARQLDESCterms);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.VOIDterms)) {
        this.VOIDterms = data().deepCopy(fields()[2].schema(), other.VOIDterms);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.SPARQLDESCpreds)) {
        this.SPARQLDESCpreds = data().deepCopy(fields()[3].schema(), other.SPARQLDESCpreds);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.voiDpreds)) {
        this.voiDpreds = data().deepCopy(fields()[4].schema(), other.voiDpreds);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'endpointResult' field */
    public core.EndpointResult getEndpointResult() {
      return endpointResult;
    }
    
    /** Sets the value of the 'endpointResult' field */
    public core.discovery.DResultGET.Builder setEndpointResult(core.EndpointResult value) {
      validate(fields()[0], value);
      this.endpointResult = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'endpointResult' field has been set */
    public boolean hasEndpointResult() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'endpointResult' field */
    public core.discovery.DResultGET.Builder clearEndpointResult() {
      endpointResult = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'SPARQLDESCterms' field */
    public java.lang.Integer getSPARQLDESCterms() {
      return SPARQLDESCterms;
    }
    
    /** Sets the value of the 'SPARQLDESCterms' field */
    public core.discovery.DResultGET.Builder setSPARQLDESCterms(int value) {
      validate(fields()[1], value);
      this.SPARQLDESCterms = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'SPARQLDESCterms' field has been set */
    public boolean hasSPARQLDESCterms() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'SPARQLDESCterms' field */
    public core.discovery.DResultGET.Builder clearSPARQLDESCterms() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'VOIDterms' field */
    public java.lang.Integer getVOIDterms() {
      return VOIDterms;
    }
    
    /** Sets the value of the 'VOIDterms' field */
    public core.discovery.DResultGET.Builder setVOIDterms(int value) {
      validate(fields()[2], value);
      this.VOIDterms = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'VOIDterms' field has been set */
    public boolean hasVOIDterms() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'VOIDterms' field */
    public core.discovery.DResultGET.Builder clearVOIDterms() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'SPARQLDESCpreds' field */
    public java.util.Map<java.lang.CharSequence,java.lang.Object> getSPARQLDESCpreds() {
      return SPARQLDESCpreds;
    }
    
    /** Sets the value of the 'SPARQLDESCpreds' field */
    public core.discovery.DResultGET.Builder setSPARQLDESCpreds(java.util.Map<java.lang.CharSequence,java.lang.Object> value) {
      validate(fields()[3], value);
      this.SPARQLDESCpreds = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'SPARQLDESCpreds' field has been set */
    public boolean hasSPARQLDESCpreds() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'SPARQLDESCpreds' field */
    public core.discovery.DResultGET.Builder clearSPARQLDESCpreds() {
      SPARQLDESCpreds = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'voiDpreds' field */
    public java.util.Map<java.lang.CharSequence,java.lang.Object> getVoiDpreds() {
      return voiDpreds;
    }
    
    /** Sets the value of the 'voiDpreds' field */
    public core.discovery.DResultGET.Builder setVoiDpreds(java.util.Map<java.lang.CharSequence,java.lang.Object> value) {
      validate(fields()[4], value);
      this.voiDpreds = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'voiDpreds' field has been set */
    public boolean hasVoiDpreds() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'voiDpreds' field */
    public core.discovery.DResultGET.Builder clearVoiDpreds() {
      voiDpreds = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public DResultGET build() {
      try {
        DResultGET record = new DResultGET();
        record.endpointResult = fieldSetFlags()[0] ? this.endpointResult : (core.EndpointResult) defaultValue(fields()[0]);
        record.SPARQLDESCterms = fieldSetFlags()[1] ? this.SPARQLDESCterms : (java.lang.Integer) defaultValue(fields()[1]);
        record.VOIDterms = fieldSetFlags()[2] ? this.VOIDterms : (java.lang.Integer) defaultValue(fields()[2]);
        record.SPARQLDESCpreds = fieldSetFlags()[3] ? this.SPARQLDESCpreds : (java.util.Map<java.lang.CharSequence,java.lang.Object>) defaultValue(fields()[3]);
        record.voiDpreds = fieldSetFlags()[4] ? this.voiDpreds : (java.util.Map<java.lang.CharSequence,java.lang.Object>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
