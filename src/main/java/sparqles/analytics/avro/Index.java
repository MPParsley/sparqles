/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package sparqles.analytics.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Index extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Index\",\"namespace\":\"sparqles.analytics.avro\",\"fields\":[{\"name\":\"endpoint\",\"type\":{\"type\":\"record\",\"name\":\"Endpoint\",\"namespace\":\"sparqles.core\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"datasets\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Dataset\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"label\",\"type\":\"string\"}]}}}]}},{\"name\":\"lastUpdate\",\"type\":\"long\"},{\"name\":\"availability\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AvailabilityIndex\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"values\",\"type\":{\"type\":\"map\",\"values\":\"double\"}}]}}},{\"name\":\"performance\",\"type\":{\"type\":\"record\",\"name\":\"IndexViewPerformance\",\"namespace\":\"sparqles.core.analytics.avro\",\"fields\":[{\"name\":\"threshold\",\"type\":\"long\"},{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"IndexViewPerformanceData\",\"namespace\":\"sparqles.analytics.avro\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"color\",\"type\":\"string\"},{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"IndexViewPerformanceDataValues\",\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"}]}}}]}}}]}},{\"name\":\"interoperability\",\"type\":{\"type\":\"record\",\"name\":\"IndexViewInteroperability\",\"namespace\":\"sparqles.core.analytics.avro\",\"fields\":[{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"IndexViewInterData\",\"namespace\":\"sparqles.analytics.avro\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"color\",\"type\":\"string\"},{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"IndexViewInterDataValues\",\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"}]}}}]}}}]}},{\"name\":\"discoverability\",\"type\":{\"type\":\"record\",\"name\":\"IndexViewDiscoverability\",\"namespace\":\"sparqles.core.analytics.avro\",\"fields\":[{\"name\":\"serverName\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"IndexViewDiscoverabilityData\",\"namespace\":\"sparqles.analytics.avro\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"IndexViewDiscoverabilityDataValues\",\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"}]}}}]}}},{\"name\":\"VoIDDescription\",\"type\":\"double\"},{\"name\":\"SDDescription\",\"type\":\"double\"},{\"name\":\"NoDescription\",\"type\":\"double\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public sparqles.core.Endpoint endpoint;
  @Deprecated public long lastUpdate;
  @Deprecated public java.util.List<sparqles.analytics.avro.AvailabilityIndex> availability;
  @Deprecated public sparqles.core.analytics.avro.IndexViewPerformance performance;
  @Deprecated public sparqles.core.analytics.avro.IndexViewInteroperability interoperability;
  @Deprecated public sparqles.core.analytics.avro.IndexViewDiscoverability discoverability;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public Index() {}

  /**
   * All-args constructor.
   */
  public Index(sparqles.core.Endpoint endpoint, java.lang.Long lastUpdate, java.util.List<sparqles.analytics.avro.AvailabilityIndex> availability, sparqles.core.analytics.avro.IndexViewPerformance performance, sparqles.core.analytics.avro.IndexViewInteroperability interoperability, sparqles.core.analytics.avro.IndexViewDiscoverability discoverability) {
    this.endpoint = endpoint;
    this.lastUpdate = lastUpdate;
    this.availability = availability;
    this.performance = performance;
    this.interoperability = interoperability;
    this.discoverability = discoverability;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return endpoint;
    case 1: return lastUpdate;
    case 2: return availability;
    case 3: return performance;
    case 4: return interoperability;
    case 5: return discoverability;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: endpoint = (sparqles.core.Endpoint)value$; break;
    case 1: lastUpdate = (java.lang.Long)value$; break;
    case 2: availability = (java.util.List<sparqles.analytics.avro.AvailabilityIndex>)value$; break;
    case 3: performance = (sparqles.core.analytics.avro.IndexViewPerformance)value$; break;
    case 4: interoperability = (sparqles.core.analytics.avro.IndexViewInteroperability)value$; break;
    case 5: discoverability = (sparqles.core.analytics.avro.IndexViewDiscoverability)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'endpoint' field.
   */
  public sparqles.core.Endpoint getEndpoint() {
    return endpoint;
  }

  /**
   * Sets the value of the 'endpoint' field.
   * @param value the value to set.
   */
  public void setEndpoint(sparqles.core.Endpoint value) {
    this.endpoint = value;
  }

  /**
   * Gets the value of the 'lastUpdate' field.
   */
  public java.lang.Long getLastUpdate() {
    return lastUpdate;
  }

  /**
   * Sets the value of the 'lastUpdate' field.
   * @param value the value to set.
   */
  public void setLastUpdate(java.lang.Long value) {
    this.lastUpdate = value;
  }

  /**
   * Gets the value of the 'availability' field.
   */
  public java.util.List<sparqles.analytics.avro.AvailabilityIndex> getAvailability() {
    return availability;
  }

  /**
   * Sets the value of the 'availability' field.
   * @param value the value to set.
   */
  public void setAvailability(java.util.List<sparqles.analytics.avro.AvailabilityIndex> value) {
    this.availability = value;
  }

  /**
   * Gets the value of the 'performance' field.
   */
  public sparqles.core.analytics.avro.IndexViewPerformance getPerformance() {
    return performance;
  }

  /**
   * Sets the value of the 'performance' field.
   * @param value the value to set.
   */
  public void setPerformance(sparqles.core.analytics.avro.IndexViewPerformance value) {
    this.performance = value;
  }

  /**
   * Gets the value of the 'interoperability' field.
   */
  public sparqles.core.analytics.avro.IndexViewInteroperability getInteroperability() {
    return interoperability;
  }

  /**
   * Sets the value of the 'interoperability' field.
   * @param value the value to set.
   */
  public void setInteroperability(sparqles.core.analytics.avro.IndexViewInteroperability value) {
    this.interoperability = value;
  }

  /**
   * Gets the value of the 'discoverability' field.
   */
  public sparqles.core.analytics.avro.IndexViewDiscoverability getDiscoverability() {
    return discoverability;
  }

  /**
   * Sets the value of the 'discoverability' field.
   * @param value the value to set.
   */
  public void setDiscoverability(sparqles.core.analytics.avro.IndexViewDiscoverability value) {
    this.discoverability = value;
  }

  /** Creates a new Index RecordBuilder */
  public static sparqles.analytics.avro.Index.Builder newBuilder() {
    return new sparqles.analytics.avro.Index.Builder();
  }
  
  /** Creates a new Index RecordBuilder by copying an existing Builder */
  public static sparqles.analytics.avro.Index.Builder newBuilder(sparqles.analytics.avro.Index.Builder other) {
    return new sparqles.analytics.avro.Index.Builder(other);
  }
  
  /** Creates a new Index RecordBuilder by copying an existing Index instance */
  public static sparqles.analytics.avro.Index.Builder newBuilder(sparqles.analytics.avro.Index other) {
    return new sparqles.analytics.avro.Index.Builder(other);
  }
  
  /**
   * RecordBuilder for Index instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Index>
    implements org.apache.avro.data.RecordBuilder<Index> {

    private sparqles.core.Endpoint endpoint;
    private long lastUpdate;
    private java.util.List<sparqles.analytics.avro.AvailabilityIndex> availability;
    private sparqles.core.analytics.avro.IndexViewPerformance performance;
    private sparqles.core.analytics.avro.IndexViewInteroperability interoperability;
    private sparqles.core.analytics.avro.IndexViewDiscoverability discoverability;

    /** Creates a new Builder */
    private Builder() {
      super(sparqles.analytics.avro.Index.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(sparqles.analytics.avro.Index.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.endpoint)) {
        this.endpoint = data().deepCopy(fields()[0].schema(), other.endpoint);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[1].schema(), other.lastUpdate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.availability)) {
        this.availability = data().deepCopy(fields()[2].schema(), other.availability);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.performance)) {
        this.performance = data().deepCopy(fields()[3].schema(), other.performance);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.interoperability)) {
        this.interoperability = data().deepCopy(fields()[4].schema(), other.interoperability);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.discoverability)) {
        this.discoverability = data().deepCopy(fields()[5].schema(), other.discoverability);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Index instance */
    private Builder(sparqles.analytics.avro.Index other) {
            super(sparqles.analytics.avro.Index.SCHEMA$);
      if (isValidValue(fields()[0], other.endpoint)) {
        this.endpoint = data().deepCopy(fields()[0].schema(), other.endpoint);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[1].schema(), other.lastUpdate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.availability)) {
        this.availability = data().deepCopy(fields()[2].schema(), other.availability);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.performance)) {
        this.performance = data().deepCopy(fields()[3].schema(), other.performance);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.interoperability)) {
        this.interoperability = data().deepCopy(fields()[4].schema(), other.interoperability);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.discoverability)) {
        this.discoverability = data().deepCopy(fields()[5].schema(), other.discoverability);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'endpoint' field */
    public sparqles.core.Endpoint getEndpoint() {
      return endpoint;
    }
    
    /** Sets the value of the 'endpoint' field */
    public sparqles.analytics.avro.Index.Builder setEndpoint(sparqles.core.Endpoint value) {
      validate(fields()[0], value);
      this.endpoint = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'endpoint' field has been set */
    public boolean hasEndpoint() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'endpoint' field */
    public sparqles.analytics.avro.Index.Builder clearEndpoint() {
      endpoint = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'lastUpdate' field */
    public java.lang.Long getLastUpdate() {
      return lastUpdate;
    }
    
    /** Sets the value of the 'lastUpdate' field */
    public sparqles.analytics.avro.Index.Builder setLastUpdate(long value) {
      validate(fields()[1], value);
      this.lastUpdate = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'lastUpdate' field has been set */
    public boolean hasLastUpdate() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'lastUpdate' field */
    public sparqles.analytics.avro.Index.Builder clearLastUpdate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'availability' field */
    public java.util.List<sparqles.analytics.avro.AvailabilityIndex> getAvailability() {
      return availability;
    }
    
    /** Sets the value of the 'availability' field */
    public sparqles.analytics.avro.Index.Builder setAvailability(java.util.List<sparqles.analytics.avro.AvailabilityIndex> value) {
      validate(fields()[2], value);
      this.availability = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'availability' field has been set */
    public boolean hasAvailability() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'availability' field */
    public sparqles.analytics.avro.Index.Builder clearAvailability() {
      availability = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'performance' field */
    public sparqles.core.analytics.avro.IndexViewPerformance getPerformance() {
      return performance;
    }
    
    /** Sets the value of the 'performance' field */
    public sparqles.analytics.avro.Index.Builder setPerformance(sparqles.core.analytics.avro.IndexViewPerformance value) {
      validate(fields()[3], value);
      this.performance = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'performance' field has been set */
    public boolean hasPerformance() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'performance' field */
    public sparqles.analytics.avro.Index.Builder clearPerformance() {
      performance = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'interoperability' field */
    public sparqles.core.analytics.avro.IndexViewInteroperability getInteroperability() {
      return interoperability;
    }
    
    /** Sets the value of the 'interoperability' field */
    public sparqles.analytics.avro.Index.Builder setInteroperability(sparqles.core.analytics.avro.IndexViewInteroperability value) {
      validate(fields()[4], value);
      this.interoperability = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'interoperability' field has been set */
    public boolean hasInteroperability() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'interoperability' field */
    public sparqles.analytics.avro.Index.Builder clearInteroperability() {
      interoperability = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'discoverability' field */
    public sparqles.core.analytics.avro.IndexViewDiscoverability getDiscoverability() {
      return discoverability;
    }
    
    /** Sets the value of the 'discoverability' field */
    public sparqles.analytics.avro.Index.Builder setDiscoverability(sparqles.core.analytics.avro.IndexViewDiscoverability value) {
      validate(fields()[5], value);
      this.discoverability = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'discoverability' field has been set */
    public boolean hasDiscoverability() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'discoverability' field */
    public sparqles.analytics.avro.Index.Builder clearDiscoverability() {
      discoverability = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Index build() {
      try {
        Index record = new Index();
        record.endpoint = fieldSetFlags()[0] ? this.endpoint : (sparqles.core.Endpoint) defaultValue(fields()[0]);
        record.lastUpdate = fieldSetFlags()[1] ? this.lastUpdate : (java.lang.Long) defaultValue(fields()[1]);
        record.availability = fieldSetFlags()[2] ? this.availability : (java.util.List<sparqles.analytics.avro.AvailabilityIndex>) defaultValue(fields()[2]);
        record.performance = fieldSetFlags()[3] ? this.performance : (sparqles.core.analytics.avro.IndexViewPerformance) defaultValue(fields()[3]);
        record.interoperability = fieldSetFlags()[4] ? this.interoperability : (sparqles.core.analytics.avro.IndexViewInteroperability) defaultValue(fields()[4]);
        record.discoverability = fieldSetFlags()[5] ? this.discoverability : (sparqles.core.analytics.avro.IndexViewDiscoverability) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
